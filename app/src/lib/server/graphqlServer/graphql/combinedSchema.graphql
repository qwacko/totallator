type Account {
  accountGroup: String
  accountGroup2: String
  accountGroup3: String
  accountGroupCombined: String
  accountGrouping: AccountGrouping
  accountTitleCombined: String
  active: Boolean!
  allowUpdate: Boolean!
  createdAt: DateTime!
  deleted: Boolean!
  disabled: Boolean!
  endDate: Date
  id: UUID!
  isCash: Boolean!
  isNetWorth: Boolean!
  startDate: Date
  status: StatusEnum!
  title: String!
  type: AccountType!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
}

input AccountFilter {
  accountGroup: StringFilter
  accountGroup2: StringFilter
  accountGroup3: StringFilter
  accountGrouping: AccountGroupingFilter
  accountGroupingId: AccountGroupingIdFilter
  accountTitleCombined: StringFilter
  active: BooleanFilter
  deleted: BooleanFilter
  disabled: BooleanFilter
  endDate: DateFilter
  id: StringFilter
  isCash: BooleanFilter
  isNetWorth: BooleanFilter
  startDate: DateFilter
  status: StatusFilter
  title: StringFilter
  type: AccountTypeFilter
}

type AccountGrouping {
  active: Boolean!
  adminUsers: [UserPublic]
  allUsers: [UserPublic]
  allowUpdate: Boolean!
  createdAt: DateTime!
  deleted: Boolean!
  disabled: Boolean!
  id: UUID!
  status: StatusEnum!
  title: String!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
  viewUsers: [UserPublic]
}

input AccountGroupingFilter {
  active: BooleanFilter
  deleted: BooleanFilter
  disabled: BooleanFilter
  title: StringFilter
}

input AccountGroupingIdFilter {
  equals: UUID
  in: [UUID]
  not: UUID
  notIn: [UUID]
}

input AccountGroupingSort {
  active: SortDirection
  deleted: SortDirection
  disabled: SortDirection
  status: SortDirection
  title: SortDirection
}

scalar AccountNumber

input AccountSort {
  accountGroup: SortDirection
  accountGroup2: SortDirection
  accountGroup3: SortDirection
  accountGroupCombined: SortDirection
  accountTitleCombined: SortDirection
  active: SortDirection
  allowUpdate: SortDirection
  deleted: SortDirection
  disabled: SortDirection
  endDate: SortDirection
  isCash: SortDirection
  isNetWorth: SortDirection
  startDate: SortDirection
  status: SortDirection
  title: SortDirection
}

enum AccountType {
  Asset
  Expense
  Income
  Liability
}

input AccountTypeFilter {
  equals: AccountType
  in: [AccountType]
  not: AccountType
  notIn: [AccountType]
}

type AccountsReturn {
  accounts: [Account!]!
  count: Int!
}

input AddJournalInput {
  accountId: UUID!
  amount: Float!
  billId: UUID
  budgetId: UUID
  categoryId: UUID
  dataChecked: Boolean
  date: Date
  description: String
  primaryJournalId: UUID!
  reconciled: Boolean
  tagId: UUID
}

scalar BigInt

type Bill {
  accountGrouping: AccountGrouping
  active: Boolean!
  allowUpdate: Boolean!
  createdAt: DateTime!
  deleted: Boolean!
  disabled: Boolean!
  id: UUID!
  status: StatusEnum!
  title: String!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
}

input BillFilter {
  accountGrouping: AccountGroupingFilter
  accountGroupingId: AccountGroupingIdFilter
  active: BooleanFilter
  allowUpdate: BooleanFilter
  deleted: BooleanFilter
  disabled: BooleanFilter
  id: StringFilter
  status: StatusFilter
  title: StringFilter
}

input BillSort {
  accountGrouping: AccountGroupingSort
  active: SortDirection
  allowUpdate: SortDirection
  deleted: SortDirection
  disabled: SortDirection
  status: SortDirection
  title: SortDirection
}

type BillsReturn {
  bills: [Bill!]!
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Budget {
  accountGrouping: AccountGrouping
  active: Boolean!
  allowUpdate: Boolean!
  createdAt: DateTime!
  deleted: Boolean!
  disabled: Boolean!
  id: UUID!
  status: StatusEnum!
  title: String!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
}

input BudgetFilter {
  accountGrouping: AccountGroupingFilter
  accountGroupingId: AccountGroupingIdFilter
  active: BooleanFilter
  allowUpdate: BooleanFilter
  deleted: BooleanFilter
  disabled: BooleanFilter
  id: StringFilter
  status: StatusFilter
  title: StringFilter
}

input BudgetSort {
  accountGrouping: AccountGroupingSort
  active: SortDirection
  allowUpdate: SortDirection
  deleted: SortDirection
  disabled: SortDirection
  status: SortDirection
  title: SortDirection
}

type BudgetsReturn {
  budgets: [Budget!]!
  count: Int!
}

scalar Byte

type CategoriesReturn {
  categories: [Category!]!
  count: Int!
}

type Category {
  accountGrouping: AccountGrouping
  active: Boolean!
  allowUpdate: Boolean!
  createdAt: DateTime!
  deleted: Boolean!
  disabled: Boolean!
  group: String!
  id: UUID!
  single: String!
  status: StatusEnum!
  title: String!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
}

input CategoryFilter {
  accountGrouping: AccountGroupingFilter
  accountGroupingId: AccountGroupingIdFilter
  active: BooleanFilter
  allowUpdate: BooleanFilter
  deleted: BooleanFilter
  disabled: BooleanFilter
  group: StringFilter
  id: StringFilter
  single: StringFilter
  status: StatusFilter
  title: StringFilter
}

input CategorySort {
  accountGrouping: AccountGroupingSort
  active: SortDirection
  allowUpdate: SortDirection
  deleted: SortDirection
  disabled: SortDirection
  group: SortDirection
  single: SortDirection
  status: SortDirection
  title: SortDirection
}

input ConnectOrCreateAccount {
  connectOrCreate: CreateAccountInput
}

input ConnectOrCreateBill {
  connectOrCreate: CreateBillInput
}

input ConnectOrCreateBudget {
  connectOrCreate: CreateBudgetInput
}

input ConnectOrCreateCategory {
  connectOrCreate: CreateCategoryInput
}

input ConnectOrCreateTag {
  connectOrCreate: CreateTagInput
}

scalar CountryCode

input CreateAccountGroupingInput {
  title: String!
}

input CreateAccountInput {
  accountGroup: String
  accountGroup2: String
  accountGroup3: String
  accountGroupingId: UUID!
  endDate: Date
  isCash: Boolean
  isNetWorth: Boolean
  startDate: Date
  status: StatusEnum
  title: String!
  type: AccountType
}

input CreateBillInput {
  accountGroupingId: UUID!
  status: StatusEnum
  title: String!
}

input CreateBudgetInput {
  accountGroupingId: UUID!
  status: StatusEnum
  title: String!
}

input CreateCategoryInput {
  accountGroupingId: UUID!
  group: String!
  single: String!
  status: StatusEnum
}

input CreateJournalInput {
  account: ConnectOrCreateAccount
  accountGroupingId: UUID!
  accountId: UUID
  amount: Float!
  bill: ConnectOrCreateBill
  billId: UUID
  budget: ConnectOrCreateBudget
  budgetId: UUID
  category: ConnectOrCreateCategory
  categoryId: UUID
  complete: Boolean
  dataChecked: Boolean
  date: Date!
  description: String!
  linked: Boolean
  reconciled: Boolean
  tag: ConnectOrCreateTag
  tagId: UUID
}

input CreateTagInput {
  accountGroupingId: UUID!
  group: String!
  single: String!
  status: StatusEnum
}

input CreateUserInput {
  admin: Boolean
  email: EmailAddress!
  firstName: String!
  lastName: String!
  password: String!
}

scalar Currency

enum CurrencyFormatEnum {
  EUR
  GBP
  JPY
  USD
}

scalar DID

scalar Date

input DateFilter {
  equals: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  not: Date
  notIn: [Date]
}

scalar DateTime

scalar Duration

scalar EmailAddress

enum EmptyFirst {
  EMPTY_FIRST
  EMPTY_LAST
}

scalar GUID

scalar HSL

scalar HSLA

scalar HexColorCode

scalar Hexadecimal

scalar IBAN

scalar IPv4

scalar IPv6

scalar ISBN

scalar ISO8601Duration

scalar JSON

scalar JSONObject

scalar JWT

input JournalEntriesFilter {
  every: JournalEntryFilter
  none: JournalEntryFilter
  some: JournalEntryFilter
}

type JournalEntriesReturn {
  count: Int!
  journalEntries: [JournalEntry!]!
  sum: Float!
}

type JournalEntry {
  account: Account!
  accountGrouping: AccountGrouping!
  accountGroupingId: String!
  accountId: String!
  amount: Float!
  amountEditable: Boolean!
  bill: Bill
  budget: Budget
  category: Category
  complete: Boolean!
  createdAt: DateTime!
  dataChecked: Boolean!
  date: Date!
  description: String!
  editable: Boolean!
  id: UUID!
  journalEntries: [JournalEntry!]!
  linked: Boolean!
  primary: Boolean!
  primaryJournal: JournalEntry!
  primaryJournalId: String!
  reconciled: Boolean!
  tag: Tag
  total: Float!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
}

input JournalEntryFilter {
  AND: [JournalEntryFilterSingle]
  OR: [JournalEntryFilterSingle]
  account: AccountFilter
  accountGrouping: AccountGroupingFilter
  accountGroupingId: UUIDFilter
  accountId: UUIDFilter
  amount: NumberFilter
  bill: BillFilter
  budget: BudgetFilter
  category: CategoryFilter
  complete: BooleanFilter
  createdAt: DateFilter
  dataChecked: BooleanFilter
  date: DateFilter
  description: StringFilter
  id: UUIDFilter
  linked: BooleanFilter
  primaryJournal: JournalEntryFilterWithoutPrimary
  primaryJournalId: UUIDFilter
  reconciled: BooleanFilter
  tag: TagFilter
  updatedAt: DateFilter
}

input JournalEntryFilterSingle {
  account: AccountFilter
  accountGrouping: AccountGroupingFilter
  accountGroupingId: UUIDFilter
  accountId: UUIDFilter
  amount: NumberFilter
  bill: BillFilter
  budget: BudgetFilter
  category: CategoryFilter
  complete: BooleanFilter
  createdAt: DateFilter
  dataChecked: BooleanFilter
  date: DateFilter
  description: StringFilter
  id: UUIDFilter
  linked: BooleanFilter
  primaryJournal: JournalEntryFilterWithoutPrimary
  primaryJournalId: UUIDFilter
  reconciled: BooleanFilter
  tag: TagFilter
  updatedAt: DateFilter
}

input JournalEntryFilterWithoutPrimary {
  account: AccountFilter
  accountGrouping: AccountGroupingFilter
  accountGroupingId: UUIDFilter
  accountId: UUIDFilter
  amount: NumberFilter
  bill: BillFilter
  budget: BudgetFilter
  category: CategoryFilter
  complete: BooleanFilter
  createdAt: DateFilter
  dataChecked: BooleanFilter
  date: DateFilter
  description: StringFilter
  id: UUIDFilter
  journalEntries: JournalEntriesFilter
  linked: BooleanFilter
  primaryJournalId: UUIDFilter
  reconciled: BooleanFilter
  tag: TagFilter
  updatedAt: DateFilter
}

input JournalEntrySort {
  account: AccountSort
  accountGrouping: AccountGroupingSort
  amount: SortDirection
  bill: BillSort
  budget: BudgetSort
  category: CategorySort
  complete: SortDirection
  createdAt: SortDirection
  dataChecked: SortDirection
  date: SortDirection
  description: SortDirection
  linked: SortDirection
  reconciled: SortDirection
  tag: TagSort
  updatedAt: SortDirection
}

scalar Latitude

scalar LocalDate

scalar LocalEndTime

scalar LocalTime

scalar Locale

scalar Long

scalar Longitude

scalar MAC

type Mutation {
  addExpenseAndConnectToJournals(expenseName: String!, journalIds: [UUID]!): [JournalEntry!]
  addJournalEntries(data: [AddJournalInput]): [JournalEntry!]
  addUserToAccountGrouping(email: String!, id: UUID!): AccountGrouping!
  changePrimaryJournal(newPrimaryId: UUID!, oldPrimaryId: UUID!): [JournalEntry!]
  cloneTransactions(ids: [UUID]!, input: UpdateJournalInput): [JournalEntry!]
  createAccount(input: CreateAccountInput!): Account!
  createAccountGrouping(input: CreateAccountGroupingInput!): AccountGrouping!
  createBill(input: CreateBillInput!): Bill!
  createBudget(input: CreateBudgetInput!): Budget!
  createCategory(input: CreateCategoryInput!): Category!
  createTag(input: CreateTagInput!): Tag!
  createTransaction(input: [CreateJournalInput!]!): [JournalEntry!]
  createUser(data: CreateUserInput!): String!
  deleteJournalEntries(journalIds: [UUID]!): [JournalEntry!]
  linkTransactions(primaryJournalIds: [UUID]!): [JournalEntry!]
  removeUserFromAccountGrouping(agID: UUID!, userID: String!): AccountGrouping!
  setUserToAGAdmin(agID: UUID!, userID: String!): AccountGrouping!
  setUserToAGView(agID: UUID!, userID: String!): AccountGrouping!
  transactionsToComplete(primaryJournalIds: [UUID]!): [JournalEntry!]
  transactionsToIncomplete(primaryJournalIds: [UUID]!): [JournalEntry!]
  unlinkTransactions(primaryJournalIds: [UUID]!): [JournalEntry!]
  updateAccountGrouping(id: UUID!, input: UpdateAccountGroupingInput!): AccountGrouping!
  updateAccounts(filter: AccountFilter!, input: UpdateAccountInput!): [Account!]!
  updateBills(filter: BillFilter!, input: UpdateBillInput!): [Bill!]!
  updateBudgets(filter: BudgetFilter!, input: UpdateBudgetInput!): [Budget!]!
  updateCategories(filter: CategoryFilter!, input: UpdateCategoryInput!): [Category!]!
  updateJournalEntries(filter: JournalEntryFilter!, input: UpdateJournalInput!): [JournalEntry!]
  updateTags(filter: TagFilter!, input: UpdateTagInput!): [Tag!]!
  updateUser(input: UpdateUserInput!): User!
}

scalar NegativeFloat

scalar NegativeInt

scalar NonEmptyString

scalar NonNegativeFloat

scalar NonNegativeInt

scalar NonPositiveFloat

scalar NonPositiveInt

input NumberFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float]
}

scalar ObjectID

scalar PhoneNumber

scalar Port

scalar PositiveFloat

scalar PositiveInt

scalar PostalCode

type Query {
  account(id: UUID!): Account!
  accountGrouping(id: UUID!): AccountGrouping
  accountGroupings: [AccountGrouping!]!
  accounts(filter: AccountFilter, limit: Int, offset: Int, sort: [AccountSort!]): AccountsReturn!
  bill(id: UUID!): Bill!
  bills(filter: BillFilter, limit: Int, offset: Int, sort: [BillSort!]): BillsReturn
  budget(id: UUID!): Budget!
  budgets(filter: BudgetFilter, limit: Int, offset: Int, sort: [BudgetSort!]): BudgetsReturn
  categories(filter: CategoryFilter, limit: Int, offset: Int, sort: [CategorySort!]): CategoriesReturn
  category(id: UUID!): Category!
  journalEntries(filter: JournalEntryFilter, limit: Int, offset: Int, sort: [JournalEntrySort!]): JournalEntriesReturn
  journalEntry(id: UUID!): JournalEntry!
  tag(id: UUID!): Tag!
  tags(filter: TagFilter, limit: Int, offset: Int, sort: [TagSort!]): TagsReturn
  testResult(id: String): TestResult
  user: User
}

scalar RGB

scalar RGBA

scalar RoutingNumber

scalar SafeInt

enum SortDirection {
  asc
  desc
}

enum StatusEnum {
  Active
  Deleted
  Disabled
}

input StatusFilter {
  equals: StatusEnum
  in: [StatusEnum]
  not: StatusEnum
  notIn: [StatusEnum]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String]
  not: String
  notIn: [String]
  startsWith: String
}

type Tag {
  accountGrouping: AccountGrouping
  active: Boolean!
  allowUpdate: Boolean!
  createdAt: DateTime!
  deleted: Boolean!
  disabled: Boolean!
  group: String!
  id: UUID!
  single: String!
  status: StatusEnum!
  title: String!
  updatedAt: DateTime!
  userIsAdmin: Boolean!
}

input TagFilter {
  accountGrouping: AccountGroupingFilter
  accountGroupingId: AccountGroupingIdFilter
  active: BooleanFilter
  allowUpdate: BooleanFilter
  deleted: BooleanFilter
  disabled: BooleanFilter
  group: StringFilter
  id: StringFilter
  single: StringFilter
  status: StatusFilter
  title: StringFilter
}

input TagSort {
  accountGrouping: AccountGroupingSort
  active: SortDirection
  allowUpdate: SortDirection
  deleted: SortDirection
  disabled: SortDirection
  group: SortDirection
  single: SortDirection
  status: SortDirection
  title: SortDirection
}

type TagsReturn {
  count: Int!
  tags: [Tag!]!
}

type TestResult {
  id: ID!
  requestTime: String!
  title: String!
}

scalar Time

scalar TimeZone

scalar Timestamp

scalar URL

scalar USCurrency

scalar UUID

input UUIDFilter {
  equals: UUID
  in: [UUID]
  not: UUID
  notIn: [UUID]
}

scalar UnsignedFloat

scalar UnsignedInt

input UpdateAccountGroupingInput {
  status: StatusEnum
  title: String
}

input UpdateAccountInput {
  accountGroup: String
  accountGroup2: String
  accountGroup3: String
  endDate: Date
  isCash: Boolean
  isNetWorth: Boolean
  startDate: Date
  status: StatusEnum
  title: String
  type: AccountType
}

input UpdateBillInput {
  status: StatusEnum
  title: String
}

input UpdateBudgetInput {
  status: StatusEnum
  title: String
}

input UpdateCategoryInput {
  group: String
  single: String
  status: StatusEnum
}

input UpdateJournalInput {
  accountId: UUID
  amount: Float
  billId: UUID
  budgetId: UUID
  categoryId: UUID
  complete: Boolean
  dataChecked: Boolean
  date: Date
  description: String
  otherAccountId: UUID
  reconciled: Boolean
  tagId: UUID
}

input UpdateTagInput {
  group: String
  single: String
  status: StatusEnum
}

input UpdateUserInput {
  currencyFormat: CurrencyFormatEnum
  darkMode: Boolean
  dateFormat: String
  firstMonthFY: Int
  firstName: String
  lastName: String
}

type User {
  admin: Boolean!
  currencyFormat: CurrencyFormatEnum!
  darkMode: Boolean!
  dateFormat: String!
  email: String!
  firstMonthFY: Int!
  firstName: String!
  id: String!
  lastName: String!
}

type UserPublic {
  email: String!
  firstName: String!
  id: String!
  lastName: String!
}

scalar UtcOffset

scalar Void